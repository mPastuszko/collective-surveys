#surveyers
  h2 Ankiety
  table.table
    thead: tr
      th
      th 
      th.lead Ukończone
      th.lead Rozpoczęte
      th
    tbody
      tr.success
        td.toggle: input type='checkbox' name='display_all' checked=true
        td: span.lead: strong Wszystkie
        td
          - finished_sets_per_answer = @answers[:all].map { |e| e[:answer] && e[:answer].size }.compact
          - finished_sets = finished_sets_per_answer.inject(:+) || 0
          - finished_stages = finished_sets_per_answer.map { |e| e / SurveyAnswer::QuestionsPerStage }.inject(:+) || 0
          span.badge.badge-success
            span.lead #{@answers[:finished].size} 
            ' ankiet
          span.badge.badge-success
            span.lead #{finished_stages} 
            ' etapów
          span.badge.badge-success
            span.lead #{finished_sets} 
            ' zestawów
        td: span.badge: span.lead #{@answers[:all].size}
        td: .btn-group.pull-right
          a.download.btn href="/designer/#{@module}/answers-finished.csv"
            i.icon-download-alt
            '  Pobierz
          a.btn.dropdown-toggle data-toggle='dropdown'
            span.caret
          ul.dropdown-menu
            li: a.download href="/designer/#{@module}/answers-finished.csv"
              i.icon-ok
              '  Ukończone
            li: a.download href="/designer/#{@module}/answers-all.csv"
              i.icon-align-justify
              '  Wszystkie
      - @answers[:surveyers].each do |surveyer|
        tr
          td.toggle: input type='checkbox' name="display[#{surveyer[:name]}]" checked=true
          td: span.lead= surveyer[:name]
          td
            - finished_sets_per_answer = surveyer[:all].map { |e| e[:answer] && e[:answer].size }.compact
            - finished_sets = finished_sets_per_answer.inject(:+) || 0
            - finished_stages = finished_sets_per_answer.map { |e| e / SurveyAnswer::QuestionsPerStage }.inject(:+) || 0
            span.badge.badge-success
              span.lead #{surveyer[:finished].size} 
              ' ankiet
            span.badge.badge-success
              span.lead #{finished_stages} 
              ' etapów
            span.badge.badge-success
              span.lead #{finished_sets} 
              ' zestawów
          td: span.badge: span.lead #{surveyer[:all].size}
          td
  form.form.subset
    label.radio.inline: strong Wyświetlaj:
    label.radio.inline.toggle
      input type='radio' name='subset' checked=true value='finished'
      '  Tylko ukończone
    label.radio.inline.toggle
      input type='radio' name='subset' value='all'
      '  Ukończone oraz rozpoczęte
  javascript:
    function reload_results(event) {
      var surveyers = $('#results-pane #surveyers');
      $('#results-pane').load(
        "/designer/#{@module}/results-part?" +
          $('input[name^="display["]').serialize() + '&' +
          $('input[name="subset"]').serialize() + '&' + 
          $('input[name="page"]').serialize(),
        null,
        function() {
          $('#results-pane #surveyers').replaceWith(surveyers);
          $('#results-pane .context-loader').remove();
        });
    }
    $('input[name="subset"]').click(function(e) {
      putLoaderAfter(e.target);
      reload_results(e);
    });
    $('input[name="display_all"]').click(function(e) {
      $('input[name^="display["]').prop('checked', $(this).prop('checked'))
      putLoaderAfter(e.target);
      reload_results(e);
    });
    $('input[name^="display["]').click(function(e) {
      var all_selected = $('input[name^="display["]').map(function(){
        return $(this).prop('checked')
      }).toArray().indexOf(false) == -1;
      $('input[name="display_all"]').prop('checked', all_selected);
      putLoaderAfter(e.target);
      reload_results(e);
    });
    $('a.download').click(function(e) {
      var link = $(e.target);
      var base_url = link.attr('href').split('?')[0];
      var params = $('input[name^="display["]').serialize();
      link.attr('href', base_url + '?' + params);
      return true;
    });
    $('.pagination a').click(function(e) {
      var page = $(e.target).attr('data-page');
      $('input[name=page]').val(page);
      putLoaderIn(e.target);
      reload_results(e);
      return false;
    });
- if @answers[:finished].empty?
  #answers
    .alert.alert-warning.alert-block.lead
      strong Brak wyników... 
      ' Jeszcze nikt z badanych nie ukończył wypełniać ankiety.
- else
  #respondents
    h2 Badani
    .vspace1
    .genders.progress
      - @women_percent = (@genders[:female] * 100.0 / @genders[:all]).round
      - @men_percent = (@genders[:male] * 100.0 / @genders[:all]).round
      .bar.bar-info style="width: #{@women_percent}%"
        ' Kobiety – #{@women_percent}%
      .bar.bar-warning style="width: #{@men_percent}%"
        ' Mężczyźni – #{@men_percent}%
    .lead.text-center w wieku od #{@ages.min} do #{@ages.max} lat (średnio #{@avg_age})
  #answers
    h2
      ' Wyniki
      .btn-group.pull-right
        a.download.btn href="/designer/#{@module}/results-finished.csv"
          i.icon-download-alt
          '  Pobierz
        a.btn.dropdown-toggle data-toggle='dropdown'
          span.caret
        ul.dropdown-menu
          li: a.download href="/designer/#{@module}/results-finished.csv"
            i.icon-ok
            '  Ukończone
          li: a.download href="/designer/#{@module}/results-all.csv"
            i.icon-align-justify
            '  Wszystkie
    input type='hidden' name='page' value=@page
    - figure_sets_per_page = 10
    .pagination.pagination-centered
      ul
        - (@results.size / figure_sets_per_page + @results.size % figure_sets_per_page).times do |p|
          li class=(p == @page ? 'active' : '')
            a href='#' data-page=p = p + 1
    - offset = @page * figure_sets_per_page
    - @results.slice(offset, figure_sets_per_page).each.with_index do |result, figure_set_num|
      - figure_ids = result.keys.select { |k| k.is_a? String }
      h3 Zestaw #{offset + figure_set_num + 1}
      .row.figure-set.results
        .matrix.span6
          .matrix-caption.similar: span podobne
          table
            - figure_ids.each do |row_id|
              tr
                - figure_ids.each do |col_id|
                  - cell = result[row_id][col_id]
                  - if cell[:cell_type] == :base
                    td.base style="background-image: url(#{cell[:url]})" data-cell=cell.to_json
                      - unless cell[:hits].empty?
                        .hits-num #{cell[:hits].size}
                      .cell-info
                        h4
                          ' Figura bazowa: 
                          strong #{cell[:hits].size}
                        .scrollable
                          .figure.thumbnail
                            img src=cell[:url] title=cell[:name]
                  - else
                    td data-cell=cell.to_json class=cell[:cell_type]
                      - unless cell[:hits].empty?
                        .hits-num #{cell[:hits].size}
                        .avg-rating #{cell[:avg_rating].round(1)}
                        .cell-info
                          - title = cell[:cell_type] == :similar ? 'Podobieństwa figur' : 'Niepodobieństwa figur'
                          h4
                            = title + ': '
                            strong= cell[:hits].size.to_s
                            .pull-right: small śr. ocena: #{cell[:avg_rating].round(1)}
                          .scrollable
                            - base_name = cell[:hits].first[:base]
                            - pair_name = cell[:hits].first[cell[:cell_type]]
                            - base_url = cell[:url].gsub(/[^\/]+$/, base_name)
                            - pair_url = cell[:url].gsub(/[^\/]+$/, pair_name)
                            table.figures
                              tr
                                td
                                  .figure.thumbnail
                                    img src=base_url title=base_name
                                td oraz
                                td
                                  .figure.thumbnail
                                    img src=pair_url title=pair_name
                            ul
                              - cell[:hits].each do |hit|
                                - explanation = hit[(cell[:cell_type].to_s + '_explanation').to_sym]
                                - unless explanation.strip.empty?
                                  li= explanation
          .matrix-caption.different: span niepodobne
        .info-box.span4
          .associations-info
            h4 Skojarzenia zestawu
            .scrollable
              ul
                - result[:associations].each do |association|
                  - unless association.strip.empty?
                    li= association
          .cell-info
    .pagination.pagination-centered
      ul
        - (@results.size / figure_sets_per_page + @results.size % figure_sets_per_page).times do |p|
          li class=(p == @page ? 'active' : '')
            a href='#' data-page=p = p + 1
    javascript:
      $(function() {
        /*
            HELPERS
        */
        function updateCellInfo(figure_set, cell) {
          var info_box = figure_set.find('.info-box');
          var associations_info_box = info_box.find('.associations-info');
          var cell_info_box = info_box.find('.cell-info');
          var cell_info = cell.find('.cell-info');
          
          cell_info_box.html(cell_info.html());
          associations_info_box.hide();
          cell_info_box.show();
        }

        function resetCellInfo(figure_set) {
          var info_box = figure_set.find('.info-box');
          var associations_info_box = info_box.find('.associations-info');
          var cell_info_box = info_box.find('.cell-info');

          cell_info_box.empty();
          cell_info_box.hide();
          associations_info_box.show();
        }

        function updateCellHover(figure_set, cell) {
          resetCellHover(figure_set, cell);
          cell.addClass('hover');
          
        }

        function resetCellHover(figure_set) {
          figure_set.find('td.hover').removeClass('hover');
        }

        function updateCellSelection(figure_set, cell) {
          resetCellSelection(figure_set);
          resetCellHover(figure_set);
          resetCellInfo(figure_set);

          if(cell) {
            cell.addClass('selected');
            updateCellInfo(figure_set, cell);
          }
        }

        function resetCellSelection(figure_set) {
          figure_set.find('td.selected').removeClass('selected');
        }

        function highlightBaseFigures(figure_set, cell) {
          resetBaseFiguresHighlight(figure_set);
          if(cell) {
            var cell_row = cell.parent().index();
            var cell_col = cell.index();
            var base_1 = figure_set.find('table tr:nth-child(' + (cell_row + 1) +
              ') td:nth-child(' + (cell_row + 1) + ')');
            var base_2 = figure_set.find('table tr:nth-child(' + (cell_col + 1) +
              ') td:nth-child(' + (cell_col + 1) + ')');

            base_1.addClass('highlighted');
            base_2.addClass('highlighted');
          }
        }

        function resetBaseFiguresHighlight(figure_set) {
          figure_set.find('.highlighted').removeClass('highlighted');
        }

        /*
            EVENT HANDLERS
        */
        function mouseOverCell(figure_set, cell, e) {
          updateCellHover(figure_set, cell);
          highlightBaseFigures(figure_set, cell);
          updateCellInfo(figure_set, cell);
        }

        function mouseLeftCell(figure_set, cell, e) {
          resetCellHover(figure_set);
          resetBaseFiguresHighlight(figure_set);
          resetCellInfo(figure_set, cell);
        }

        $(".matrix table").delegate('td','mouseover mouseleave', function(e) {
          var figure_set = $(this).parents('.figure-set');
          var cell = $(this);

          if(figure_set.find('td.selected').length == 0) {
            if(e.type == 'mouseover') {
              mouseOverCell(figure_set, cell, e);
            } else {
              mouseLeftCell(figure_set, cell, e);
            }
          }
        });

        $(".matrix table").delegate('td','click', function(e) {
          var figure_set = $(this).parents('.figure-set');
          var cell = $(this);

          if(cell.hasClass('selected')) {
            resetCellSelection(figure_set);
          } else {
            updateCellSelection(figure_set, cell);
          }
        });

      });